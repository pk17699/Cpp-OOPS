#include <iostream>
#include<cstring>
using namespace std;

class Car{
    private:
    float price;
    public:
    int model;
    char *name;

    Car(float p, int m, const char *n){         //parameterised constructor
        price = p;
        model = m;
        name = new char[strlen(n) + 1];         // Dynamic memory allocation
        strcpy(name, n);
    }

    Car(Car &x){                               // Deep copy constructor
        price = x.price;                       // If you remove this constructor 
        model = x.model;                       // compiler will do shallow copy
        name = new char[strlen(x.name) + 1];
        strcpy(name, x.name);
    }

void set_price(float p){
    float msp = 120;
    if(p > 0){
    price = p;
    }
    else{
        price = msp;
    }
}
void print(){
    cout<<"Name "<<name<<"\n";
    cout<<"Model "<<model<<"\n";
    cout<<"Price "<<price<<"\n";
    cout<<"\n";
}

};

int main(){
    Car c(120, 340, "BMW");
    Car d(c);                 // Calling deep copy constructor 

    d.set_price(400);         // Compiler does shallow copy by default
    d.name[0] = 'A';          // Shallow copy has ambiguity because it modified
                              // name of c object as well but we want to change
    c.print();                // only d objct name
    d.print();
return 0;
}
